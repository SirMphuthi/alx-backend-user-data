#!/usr/bin/env python3
"""DB module

This module defines the DB class for handling database operations
related to user authentication, including creating user records.
"""
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm.session import Session

# Import Base and User from the user module
from user import Base, User


class DB:
    """
    DB class handles database operations for the user authentication service.

    It manages the SQLAlchemy engine and session, providing methods
    to interact with the database, such as adding new user records.
    """

    def __init__(self) -> None:
        """
        Initialize a new DB instance.

        Sets-up the SQLAlchemy engine to connect to an in-memory SQLite DB
        named 'a.db'. It drops any existing tables defined by Base metadata
        and then creates all necessary tables.
        """
        # Using echo=False for cleaner output in production/testing
        self._engine = create_engine("sqlite:///a.db", echo=False)
        # Drop all existing tables (if any) defined by Base metadata
        Base.metadata.drop_all(self._engine)
        # Create all tables defined by Base metadata
        Base.metadata.create_all(self._engine)
        self.__session = None  # Initialize private session attribute

    @property
    def _session(self) -> Session:
        """
        Memoized session object.

        Returns a SQLAlchemy Session instance. If a session does not
        already exist for this DB instance, it creates a new one
        bound to the engine. This method ensures only one session
        is created per DB instance.
        """
        if self.__session is None:
            DBSession = sessionmaker(bind=self._engine)
            self.__session = DBSession()
        return self.__session

    def add_user(self, email: str, hashed_password: str) -> User:
        """
        Adds a new user record to the database.

        Args:
            email (str): The email address of the new user.
            hashed_password (str): The hashed password of the new user.

        Returns:
            User: The newly created User object after it has been
                  persisted to the database, with its `id` populated.
        """
        # Create a new User instance
        new_user = User(email=email, hashed_password=hashed_password)

        # Add the new user to the current session
        self._session.add(new_user)
        # Commit the transaction to save the user to the database
        self._session.commit()
        # Refresh the object to ensure its primary key (id) is populated
        # after the commit, as it might be generated by the database.
        self._session.refresh(new_user)
        return new_user
